// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// B2B Organization and Team models
model Organization {
    id        String   @id @default(cuid())
    name      String
    slug      String   @unique
    logo      String?
    website   String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    members UserOrganization[]
    teams   Team[]

    // Owner (main admin)
    ownerId String
    owner   User   @relation("OwnedOrganizations", fields: [ownerId], references: [id])

    // Billing data could be added here or in a separate model
    billingEmail       String?
    billingName        String?
    stripeCustomerId   String? @unique
    subscriptionStatus String? // 'active', 'trialing', 'canceled', etc.

    @@index([slug])
}

enum TeamRole {
    MEMBER
    ADMIN
}

model Team {
    id          String   @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    members        UserTeam[]

    @@unique([organizationId, name])
    @@index([organizationId])
}

enum OrganizationRole {
    OWNER
    ADMIN
    MEMBER
}

model UserOrganization {
    id        String           @id @default(cuid())
    role      OrganizationRole @default(MEMBER)
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt

    // Relations
    userId         String
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    @@unique([userId, organizationId])
    @@index([organizationId])
    @@index([userId])
}

model UserTeam {
    id        String   @id @default(cuid())
    role      TeamRole @default(MEMBER)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    teamId String
    team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

    @@unique([userId, teamId])
    @@index([teamId])
    @@index([userId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    // Auth relations
    accounts Account[]
    sessions Session[]

    // Organization and team memberships
    organizations      UserOrganization[]
    ownedOrganizations Organization[]     @relation("OwnedOrganizations")
    teams              UserTeam[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // User preferences
    defaultOrganizationId String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
